diff --git a/Makefile b/Makefile
index 62fd0f8..c4dae69 100644
--- a/Makefile
+++ b/Makefile
@@ -139,6 +139,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_load\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..cfe32c5 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -187,3 +188,10 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+#define MAX_HISTORY 100
+#define MAX_CMD_LENGTH 100
+
+extern char command_history[MAX_HISTORY][MAX_CMD_LENGTH];
+extern struct spinlock last_cmd_lock;
+extern struct spinlock printlock;
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..b4e8835 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -6,6 +6,8 @@
 
 volatile static int started = 0;
 
+void init_user_lock(void);
+
 // start() jumps here in supervisor mode on all CPUs.
 void
 main()
@@ -30,6 +32,10 @@ main()
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
     __sync_synchronize();
+
+    init_user_lock();
+    initlock(&last_cmd_lock, "last_command_lock");
+    initlock(&printlock, "printlock");
     started = 1;
   } else {
     while(started == 0)
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..f1788f4 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -26,6 +26,8 @@ extern char trampoline[]; // trampoline.S
 // must be acquired before any p->lock.
 struct spinlock wait_lock;
 
+char command_history[100][100];
+struct spinlock last_cmd_lock; 
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
@@ -169,6 +171,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->sysID = 0;
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -686,3 +689,15 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+trace(int sys_num)
+{
+  if (sys_num <= 0)
+  {
+    return -1;
+  }
+  
+  myproc()->sysID = sys_num;
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..6f817f5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,6 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 sysID;
+  int isTrace;
 };
diff --git a/kernel/procInfo.h b/kernel/procInfo.h
new file mode 100644
index 0000000..dd33779
--- /dev/null
+++ b/kernel/procInfo.h
@@ -0,0 +1,12 @@
+#ifndef PROC_INFO_H
+#define PROC_INFO_H
+
+
+struct procInfo {
+  int activeProcess;   // Number of active processes
+  int totalProcess;    // Total number of processes
+  int memsize;         // Total memory used by active processes
+  int totalMemSize;    // Total available memory in the system
+};
+
+#endif
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8582830 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,9 @@
 #include "syscall.h"
 #include "defs.h"
 
+int traceID = -1;
+struct spinlock printlock;
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -52,11 +55,51 @@ argraw(int n)
   return -1;
 }
 
+struct intArgument
+{
+  int arg;
+  int index;
+};
+
+struct addrArgument
+{
+  uint64 arg;
+  int index;
+};
+
+struct strArgument
+{
+  char* arg;
+  int index;
+};
+
+struct argumentTrace
+{
+    struct addrArgument addr[10];
+    struct strArgument str[10];
+    struct intArgument intarg[10];
+};
+
+struct argumentTrace argTrace;
+
+void initArgumentTrace(){
+  for(int i=0; i<10; i++){
+    argTrace.addr[i].index = -1;
+    argTrace.str[i].index = -1;
+    argTrace.intarg[i].index = -1;
+  }
+}
+
 // Fetch the nth 32-bit system call argument.
 void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+
+  if(myproc()->sysID == myproc()->trapframe->a7){
+    argTrace.intarg[n].arg = *ip;
+    argTrace.intarg[n].index = n;
+  }
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +109,11 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+
+  if(myproc()->sysID == myproc()->trapframe->a7){
+    argTrace.addr[n].arg = *ip;
+    argTrace.addr[n].index = n;
+  }
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,7 +124,13 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
-  return fetchstr(addr, buf, max);
+  int status;
+  status = fetchstr(addr, buf, max);
+  if(myproc()->sysID == myproc()->trapframe->a7){
+    argTrace.str[n].arg = buf;
+    argTrace.str[n].index = n;
+  }
+  return status;
 }
 
 // Prototypes for the functions that handle system calls.
@@ -101,6 +155,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_info(void);
+extern uint64 sys_lockuser(void);
+extern uint64 sys_getlastcmd(void);
+extern uint64 sys_setlastcmd(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +185,41 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_info]    sys_info,
+[SYS_lockuser]    sys_lockuser,
+[SYS_getlastcmd]    sys_getlastcmd,
+[SYS_setlastcmd]    sys_setlastcmd,
+};
+
+char* syscall_names[] = {
+  "",
+  "fork",
+  "exit",
+  "wait",
+  "pipe",
+  "read",
+  "kill",
+  "exec",
+  "fstat",
+  "chdir",
+  "dup",
+  "getpid",
+  "sbrk",
+  "sleep",
+  "uptime",
+  "open",
+  "write",
+  "mknod",
+  "unlink",
+  "link",
+  "mkdir",
+  "close",
+  "trace",
+  "info",
+  "lockuser",
+  "getlastcmd",
+  "setlastcmd",
 };
 
 void
@@ -135,10 +229,58 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+  
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    if(p->sysID == num){
+      traceID = num;
+      acquire(&printlock);
+      printf("pid: %d, syscall: %s, args: ", p->pid, syscall_names[p->sysID]);
+      release(&printlock);
+      initArgumentTrace();
+    }
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+
+    traceID = -1;
+    if(p->sysID == num){
+      acquire(&printlock);
+      printf("(");
+      int found = 0;
+      int cnt = 0;
+      for(int i=0;i<10;i++){
+        if(argTrace.intarg[i].index != -1){
+          if(cnt!=0)printf(" ");
+          printf("%d,",argTrace.intarg[i].arg);
+          found = 1;
+        }
+        else if(argTrace.str[i].index != -1){
+          if(cnt!=0)printf(" ");
+          printf("%s,",argTrace.str[i].arg);
+          found = 1;
+        }
+        else if(argTrace.addr[i].index != -1){
+          if(cnt!=0)printf(" ");
+          printf("%p,",(void*)argTrace.addr[i].arg);
+          found = 1;
+        }
+        cnt++;
+      }
+      if(found){
+        printf("\b)");
+      }
+      else{
+        printf(")");
+      }
+      release(&printlock);
+      initArgumentTrace();
+    }
+
+    if(p->sysID == num){
+      acquire(&printlock);
+      printf(", return: %lu\n", p->trapframe->a0);
+      release(&printlock);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..df91a65 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_info   23
+#define SYS_lockuser 24
+#define SYS_getlastcmd 25
+#define SYS_setlastcmd 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..2a33c18 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,22 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "procInfo.h"
+
+#define MAX_HISTORY 100
+#define MAX_CMD_LENGTH 100
+
+extern char command_history[MAX_HISTORY][MAX_CMD_LENGTH];
+int history_count = 0;
+extern struct spinlock last_cmd_lock;
+
+extern struct proc proc[];
+struct spinlock user_lock;
+
+void init_user_lock(void) 
+{
+    initlock(&user_lock, "user_lock");
+}
 
 uint64
 sys_exit(void)
@@ -91,3 +107,99 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int syscall_number;
+  argint(0, &syscall_number);
+  return trace(syscall_number);
+}
+
+uint64
+sys_info(void) 
+{
+  struct procInfo pInfo;
+  struct proc *p;
+  int total_memsize = 0;
+  int active_processes = 0;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    if(p->state == RUNNABLE || p->state == RUNNING) {
+      active_processes++;
+      total_memsize += p->sz;
+    }
+  }
+
+  pInfo.activeProcess = active_processes;
+  pInfo.totalProcess = NPROC;
+  pInfo.memsize = total_memsize; 
+  pInfo.totalMemSize = PHYSTOP - KERNBASE;
+
+  uint64 addr;
+  argaddr(0, &addr);
+  if(copyout(myproc()->pagetable, addr, (char *)&pInfo, sizeof(pInfo)) < 0) return -1;
+  
+  return 0;
+}
+
+uint64
+sys_lockuser(void) 
+{
+    int operation;
+    argint(0, &operation);
+
+    if (operation == 0) {
+        acquire(&user_lock);
+        return 0;
+    } 
+    else if (operation == 1) {
+        release(&user_lock);
+        return 0;
+    } 
+    else {
+        return -1;
+    }
+}
+
+int 
+sys_setlastcmd(void) 
+{
+    char cmd[MAX_CMD_LENGTH];
+
+    if (argstr(0, cmd, sizeof(cmd)) < 0) return -1; 
+    
+    acquire(&last_cmd_lock);
+    if (history_count < MAX_HISTORY) {
+        strncpy(command_history[history_count++], cmd, sizeof(command_history[0]) - 1);
+        command_history[history_count - 1][sizeof(command_history[0]) - 1] = '\0';
+    } 
+    else {
+        history_count = 0;
+        strncpy(command_history[history_count++], cmd, sizeof(command_history[0]) - 1);
+        command_history[history_count - 1][sizeof(command_history[0]) - 1] = '\0';
+    }
+    
+    release(&last_cmd_lock);
+    return 0;
+}
+
+int 
+sys_getlastcmd(void)
+{
+    uint64 addr;
+    argaddr(0, &addr);
+    
+    acquire(&last_cmd_lock);
+    
+    for (int i = 0; i < history_count; i++) {
+        if (copyout(myproc()->pagetable, addr + i * MAX_CMD_LENGTH, command_history[i], MAX_CMD_LENGTH) < 0) {
+            release(&last_cmd_lock);
+            return -1;
+        }
+    }
+
+    release(&last_cmd_lock);
+    return history_count;
+}
+
diff --git a/user/load.c b/user/load.c
new file mode 100644
index 0000000..0c3a80f
--- /dev/null
+++ b/user/load.c
@@ -0,0 +1,111 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+// int info(struct procInfo *pinfo);
+// int lockuser(int operation);
+
+int main(int argc, char *argv[]) {
+
+    if(argc != 3) {
+        printf("Usage: load <childCount> <allocationAmount>\n");
+        exit(1);
+    }
+
+    // int lx = 1;
+
+    int childCount = atoi(argv[1]);
+    int allocAmount = atoi(argv[2]);
+    int pid = 1;
+
+    printf("Parent going to sleep.\n");
+
+    for(int i = 0; i < childCount; i++) {
+        pid = fork();
+
+        if(pid < 0) 
+        {
+            printf("Failed to create child process.\n");
+            exit(1);
+        }
+        if(pid == 0) 
+        {
+            // if(lx) 
+            // {
+            //     lockuser(0);
+            //     lx = 0;
+            // }
+            printf("Child is created.\n");
+            char *mem = malloc(allocAmount);
+            if(mem == 0) 
+            {
+                printf("Memory allocation failed for Child.\n");
+                // if(!lx) 
+                // {
+                //     lockuser(1);
+                //     lx = 1;
+                // }
+                exit(1);
+            }
+            printf("Child allocated %d bytes.\n", allocAmount);
+            printf("Child going to sleep.\n");
+            // if(!lx) 
+            // {
+            //     lockuser(1);
+            //     lx = 1;
+            // }
+            sleep(100);
+            break;    
+        }
+        sleep(10);
+    }
+
+    if(pid == 0) 
+    {
+        // if(!lx) 
+        // {
+        //     lockuser(1);
+        //     lx = 1;
+        // }
+        while(1){}
+    }
+
+
+    if(pid > 0)
+    {
+        sleep(300);   
+        // if(lx) 
+        // {
+        //     lockuser(0);
+        //     lx = 0;
+        // }
+        printf("Parent wake up.\n");
+        
+        struct procInfo *pInfo = malloc(sizeof(struct procInfo));
+        if(pInfo == 0) 
+        {
+            printf("Memory allocation failed for procInfo.\n");
+            // if(!lx) 
+            // {
+            //     lockuser(1);
+            //     lx = 1;
+            // }
+            exit(1);
+        }
+
+        if(info(pInfo) == 0) 
+        {
+            printf("Current system information:\n");
+            printf("Processes: %d/%d\n", pInfo->activeProcess, pInfo->totalProcess);
+            printf("RAM: %f/%d (in MB)\n", ((float)pInfo->memsize/(1024.0*1024.0)), (pInfo->totalMemSize/(1024*1024)));
+        }
+
+        free(pInfo);
+        // if(!lx) 
+        // {
+        //     lockuser(1);
+        //     lx = 1;
+        // }
+        exit(0);   
+    }
+    
+}
diff --git a/user/printf.c b/user/printf.c
index 8178746..8fcddba 100644
--- a/user/printf.c
+++ b/user/printf.c
@@ -47,6 +47,23 @@ printptr(int fd, uint64 x) {
     putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
 }
 
+static void printfloat(int fd, double f) {
+    int int_part = (int)f;
+    double frac_part = f - (double)int_part;
+    int frac_digits = 6;
+
+    printint(fd, int_part, 10, 1);
+
+    putc(fd, '.');
+
+    while (frac_digits--) {
+        frac_part *= 10;
+        int digit = (int)frac_part;
+        putc(fd, digits[digit]);
+        frac_part -= digit;
+    }
+}
+
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 vprintf(int fd, const char *fmt, va_list ap)
@@ -69,6 +86,8 @@ vprintf(int fd, const char *fmt, va_list ap)
       if(c1) c2 = fmt[i+2] & 0xff;
       if(c0 == 'd'){
         printint(fd, va_arg(ap, int), 10, 1);
+      } else if (c0 == 'f') {
+        printfloat(fd, va_arg(ap, double));
       } else if(c0 == 'l' && c1 == 'd'){
         printint(fd, va_arg(ap, uint64), 10, 1);
         i += 1;
diff --git a/user/sh.c b/user/sh.c
index 836ebcb..20951cb 100644
--- a/user/sh.c
+++ b/user/sh.c
@@ -76,6 +76,7 @@ runcmd(struct cmd *cmd)
     ecmd = (struct execcmd*)cmd;
     if(ecmd->argv[0] == 0)
       exit(1);
+    
     exec(ecmd->argv[0], ecmd->argv);
     fprintf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
@@ -165,8 +166,68 @@ main(void)
         fprintf(2, "cannot cd %s\n", buf+3);
       continue;
     }
+
+    if (strcmp(buf, "!!\n") == 0 || strncmp(buf, "!! ", 3) == 0) 
+    {
+        char last_cmd[100][100];
+        int count = getlastcmd(last_cmd);
+        char par = 0;
+
+        if (strncmp(buf, "!! ", 3) == 0) {
+            par = atoi(buf + 3);
+            // printf("%d\n", par); 
+            count -= par;  
+        }
+        if(!par) count--;
+
+        if (count < 0) {
+            fprintf(2, "No such command!\n");
+            continue;
+        }
+
+        while (count >= 0 && (strcmp(last_cmd[count], "!!") == 0 || strncmp(last_cmd[count], "!! ", 3) == 0)) 
+        {
+            int at = 0;
+            printf("%s\n", last_cmd[count]);
+            if(strncmp(last_cmd[count], "!! ", 3)==0)
+            {
+              at = atoi(last_cmd[count] + 3);
+              count -= at;
+            }
+            if(!at) count--;    
+        }
+
+        if (count >= 0) {
+            printf("%s\n", last_cmd[count]);
+            if (fork1() == 0) 
+            {
+                runcmd(parsecmd(last_cmd[count]));
+            }
+            wait(0);
+        } 
+        else {
+            fprintf(2, "No valid command found to execute.\n");
+        }
+        int len = strlen(buf);
+        if (len > 0 && buf[len - 1] == '\n') 
+        {
+            buf[len - 1] = '\0';
+        }
+        setlastcmd(buf);
+        continue;
+    }
+    
     if(fork1() == 0)
+    {
+      // char *concatenated = concat_argv(ecmd->argv);
+      int len = strlen(buf);
+      if (len > 0 && buf[len - 1] == '\n') 
+      {
+          buf[len - 1] = '\0';
+      }
+      setlastcmd(buf);
       runcmd(parsecmd(buf));
+    }
     wait(0);
   }
   exit(0);
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..c0ecb56
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    char *nargv[MAXARG];
+
+    if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')) {
+        fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+        exit(1);
+    }
+    
+    if (trace(atoi(argv[1])) < 0) {
+        fprintf(2, "%s: trace failed\n", argv[0]);
+        exit(1);
+    }
+    
+    for(int i = 2; i < argc && i < MAXARG; i++) {
+        nargv[i-2] = argv[i];
+    }
+
+    exec(nargv[0], nargv);
+
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..ee10dd0 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -145,3 +145,20 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
+int 
+strncmp(const char *p, const char *q, uint n) 
+{
+    while (n > 0 && *p && *q) {
+        if (*p != *q) {
+            return (uchar)*p - (uchar)*q;
+        }
+        p++;
+        q++;
+        n--;
+    }
+    if (n == 0) {
+        return 0;
+    }
+    return (n > 0) ? (uchar)*p - (uchar)*q : 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 04013ca..30e5ee6 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+#include "kernel/procInfo.h"
 
 // system calls
 int fork(void);
@@ -22,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int setlastcmd(char *cmd);
+int getlastcmd(char cmd[][100]);
+int info(struct procInfo *pinfo);
 
 // ulib.c
 int stat(const char*, struct stat*);
@@ -39,3 +44,4 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+int strncmp(const char *, const char *q, uint); 
\ No newline at end of file
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..f24901a 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("info");
+entry("lockuser");
+entry("getlastcmd");
+entry("setlastcmd");
\ No newline at end of file
